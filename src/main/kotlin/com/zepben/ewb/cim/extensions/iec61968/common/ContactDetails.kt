/*
 * Copyright 2025 Zeppelin Bend Pty Ltd
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

package com.zepben.ewb.cim.extensions.iec61968.common

import com.zepben.ewb.cim.extensions.ZBEX
import com.zepben.ewb.cim.iec61968.common.ElectronicAddress
import com.zepben.ewb.cim.iec61968.common.StreetAddress
import com.zepben.ewb.cim.iec61968.common.TelephoneNumber
import java.util.*

/**
 * [ZBEX]
 * The details required to contact a person or company.
 *
 * @property phoneNumbers [ZBEX] Phone numbers.
 * @property contactAddress [ZBEX] Contact address, potentially different than 'streetAddress' (e.g., another city).
 * @property electronicAddresses [ZBEX] Electronic addresses.
 * @property contactType [ZBEX] The type of contact, e.g Account Owner.
 * @property id [ZBEX] The identifier for this contact, could be autogenerated.
 * @property firstName [ZBEX] First name of the contact.
 * @property lastName [ZBEX] Last name of the contact.
 * @property preferredContactMethod [ZBEX] The preferred contact method for this contact.
 * @property isPrimary [ZBEX] Whether this contact is a primary contact.
 * @property businessName [ZBEX] The business name of this contact.
 */
@ZBEX
class ContactDetails(id: String = ""){

    @ZBEX
    var phoneNumbers: MutableList<TelephoneNumber>? = null

    @ZBEX
    var contactAddress: StreetAddress? = null

    @ZBEX
    var electronicAddresses: MutableList<ElectronicAddress>? = null

    @ZBEX
    var contactType: String? = null

    @ZBEX
    val id: String = id.ifEmpty { UUID.randomUUID().toString() }

    @ZBEX
    var firstName: String? = null

    @ZBEX
    var lastName: String? = null

    @ZBEX
    var preferredContactMethod: ContactMethodType = ContactMethodType.UNKNOWN

    @ZBEX
    var isPrimary: Boolean? = null

    @ZBEX
    var businessName: String? = null

    fun addTelephoneNumber(phoneNumber: TelephoneNumber): ContactDetails {
        phoneNumbers = phoneNumbers ?: mutableListOf()
        phoneNumbers!!.add(phoneNumber)
        return this
    }

    fun removeTelephoneNumber(phoneNumber: TelephoneNumber): Boolean {
        val ret = phoneNumbers?.remove(phoneNumber) == true
        if (phoneNumbers.isNullOrEmpty()) phoneNumbers = null
        return ret
    }

    fun addElectronicAddress(electronicAddress: ElectronicAddress): ContactDetails {
        electronicAddresses = electronicAddresses ?: mutableListOf()
        electronicAddresses!!.add(electronicAddress)
        return this
    }

    fun removeElectronicAddress(electronicAddress: ElectronicAddress): Boolean {
        val ret = electronicAddresses?.remove(electronicAddress) == true
        if (electronicAddresses.isNullOrEmpty()) electronicAddresses = null
        return ret
    }

}
