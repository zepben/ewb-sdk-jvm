/*
 * Copyright 2025 Zeppelin Bend Pty Ltd
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

package com.zepben.ewb.database.sqlite.cim.tables.extensions.iec61968.common

import com.zepben.ewb.database.sql.Column
import com.zepben.ewb.database.sql.Column.Nullable.NOT_NULL
import com.zepben.ewb.database.sql.Column.Nullable.NULL
import com.zepben.ewb.database.sql.Column.Type.BOOLEAN
import com.zepben.ewb.database.sql.Column.Type.STRING
import com.zepben.ewb.database.sqlite.common.SqliteTable

/**
 * A class representing the `ContactDetails` columns required for the database table.
 *
 * @property ID A column storing the identifier for this contact, could be autogenerated.
 * @property CONTACT_TYPE A column storing the type of contact, e.g. Account Owner.
 * @property FIRST_NAME A column storing the first name of the contact.
 * @property LAST_NAME A column storing the last name of the contact.
 * @property PREFERRED_CONTACT_METHOD A column storing the preferred contact method for this contact.
 * @property IS_PRIMARY A column storing whether this contact is a primary contact.
 * @property BUSINESS_NAME A column storing the business name of this contact.
 */
@Suppress("PropertyName")
abstract class TableContactDetails : SqliteTable() {

    val ID: Column = Column(++columnIndex, "id", STRING, NOT_NULL)
    val CONTACT_TYPE: Column = Column(++columnIndex, "contact_type", STRING, NULL)
    val FIRST_NAME: Column = Column(++columnIndex, "first_name", STRING, NULL)
    val LAST_NAME: Column = Column(++columnIndex, "last_name", STRING, NULL)
    val PREFERRED_CONTACT_METHOD: Column = Column(++columnIndex, "preferred_contact_method", STRING, NULL)
    val IS_PRIMARY: Column = Column(++columnIndex, "is_primary", BOOLEAN, NULL)
    val BUSINESS_NAME: Column = Column(++columnIndex, "business_name", STRING, NULL)

    init {
        addUniqueIndexes(
            listOf(ID)
        )
    }

}
